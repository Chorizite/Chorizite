<rml>
	<head>
		<style>
      body {
        display: block;
        font-family: Tahoma;
        height: 100%;
        width: 100%;
        color: #fff;
        background-color: black;
        font-size: 20px;
        z-index: -5000;
      }

      div.wrapper {
        text-align: center;
        width: 100%;
        margin-top: 40px;
        padding-top: 400px;
        decorator: image( dat://0x06006E20 );
        display: flex;
      }

      .connect, .patch {
        flex: 1;
      }

      progress.horizontal {
        display: block;
        margin: auto;
        width: 320px;
        height: 40px;
        decorator: image( dat://0x06001979 );
        animation: loader 1s infinite;
      }

      progress.horizontal fill {
        animation: loader-fill 1s infinite;
      }

      @keyframes loader {
        from { decorator: image( dat://0x06001966 ); }
        7% { decorator: image( dat://0x06001967 ); }
        14% { decorator: image( dat://0x06001968 ); }
        21% { decorator: image( dat://0x06001969 ); }
        28% { decorator: image( dat://0x0600196A ); }
        35% { decorator: image( dat://0x0600196B ); }
        42% { decorator: image( dat://0x0600196C ); }
        49% { decorator: image( dat://0x0600196D ); }
        56% { decorator: image( dat://0x0600196E ); }
        63% { decorator: image( dat://0x0600196F ); }
        70% { decorator: image( dat://0x06001975 ); }
        77% { decorator: image( dat://0x06001976 ); }
        84% { decorator: image( dat://0x06001977 ); }
        91% { decorator: image( dat://0x06001978 ); }
        to { decorator: image( dat://0x06001979 ); }
      }

      @keyframes loader-fill {
        from { decorator: image( dat://0x0600195C cover left ); }
        7% { decorator: image( dat://0x0600195D cover left ); }
        14% { decorator: image( dat://0x0600195E cover left ); }
        21% { decorator: image( dat://0x0600195F cover left ); }
        28% { decorator: image( dat://0x06001960 cover left ); }
        35% { decorator: image( dat://0x06001961 cover left ); }
        42% { decorator: image( dat://0x06001962 cover left ); }
        49% { decorator: image( dat://0x06001963 cover left ); }
        56% { decorator: image( dat://0x06001964 cover left ); }
        63% { decorator: image( dat://0x06001965 cover left ); }
        70% { decorator: image( dat://0x06001971 cover left ); }
        77% { decorator: image( dat://0x06001972 cover left ); }
        84% { decorator: image( dat://0x06001973 cover left ); }
        91% { decorator: image( dat://0x06001974 cover left ); }
        to { decorator: image( dat://0x06001974 cover left ); }
      }
    </style>
    <script type="">
      local rx = require('rx')
      local backend = require('ClientBackend')
      local ac = require('Plugins.Core.AC').Game

      local state = rx:CreateState({
        ConnectPercentage = ac.PatchProgress.ConnectPercentage,
        PatchPercentage = ac.PatchProgress.PatchPercentage,
        ExpectedBytes = ac.PatchProgress.ExpectedBytes,
        ReceivedBytes = ac.PatchProgress.ReceivedBytes,
        IsPatching = ac.PatchProgress.IsPatching
      })

      -- subscribe to events to update our reactive state
      ac.PatchProgress:OnConnectProgress('+', function()
        state.ConnectPercentage = ac.PatchProgress.ConnectPercentage
      end)

      ac.PatchProgress:OnPatchProgress('+', function()
        state.PatchPercentage = ac.PatchProgress.PatchPercentage
        state.ExpectedBytes = ac.PatchProgress.ExpectedBytes
        state.ReceivedBytes = ac.PatchProgress.ReceivedBytes
        state.IsPatching = ac.PatchProgress.IsPatching
      end)

      local DatPatchView = function(state)
        return rx:Div({ class="wrapper" }, {
          rx:Div({ class="connect" }, {
            rx:Progress({ value = state.ConnectPercentage, class="horizontal" }),
            rx:Span(state.ConnectPercentage < 1 and "Connecting" or "Connected!")
          }),
          rx:Div({ class="patch" }, {
            rx:Progress({ value = state.PatchPercentage, class="horizontal" }),
            rx:Span(IsPatching and string.format("Patching %.2f%% (%d/%d)", state.PatchPercentage * 100, state.ReceivedBytes, state.ExpectedBytes) or "")
          })
        })
      end

      document:Mount(function() return DatPatchView(state) end, "#datpatch")
    </script>
	</head>
	<body>
    <div id="datpatch"></div>
	</body>
</rml>