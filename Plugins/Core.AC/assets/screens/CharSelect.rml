<rml>
  <head>
    <style>
            body {
              font-family: Tahoma;
              height: 100%;
              width: 100%;
              decorator: image( dat://0x06004d63 );
              z-index: -5000;
            }

            #panel {
              display: block;
              position: absolute;
              top: 206px;
              left: 37px;
              width: 252px;
              padding: 4px;
              height: 300px;
            }

            #panel li {
              display: block;
              height: 28px;
              line-height: 28px;
              padding-left: 6px;
              font-size: 14px;
              font-effect: outline(1px black);
            }

            button {
              position: absolute;
              display: inline-block;
              text-align: center;
              width: 100px;
              height: 30px;
              line-height: 30px;
              font-size: 18dp;
              font-effect: outline(2px black);
            }

            button:hover {
              decorator: image( dat://0x06004c9f );
            }

            button#createcharacter {
              color: #ffff00;
              top: 185px;
              left: 315px;
              width: 220px;
              height: 50px;
              line-height: 50px;
              font-size: 21dp;
              font-weight: bold;
            }

            button#enter {
      				display: block;
              decorator: image( dat://0x06004CB2 );
              top: 290px;
              left: 340px;
              width: 211px;
              height: 211px;
              line-height: 210px;
              font-size: 32dp;
              font-weight: bold;
            }

            button#enter:hover {
              decorator: image( dat://0x06004CB3 );
            }

            button#delete {
              top: 522px;
              left: 36px;
            }

            button#credits {
              top: 522px;
              left: 465px;
            }

            button#exit {
              top: 522px;
              left: 615px;
            }

            span#world {
              decorator: image( dat://0x06004D64 );
              display: inline-block;
              width: 250px;
              height: 110px;
              line-height: 110px;
              font-size: 18px;
              text-align: center;
              position: absolute;
              top: 44px;
              left: 0px;
            }
      	  li:hover {
      		background-color: #ffff0099;
      	  }
      	  li.selected {
      		background-color: yellow;
      	  }
      	  li:active {
      		background-color: red;
      	  }
    </style>
    <script type="">
      local rx = require('rx')
      local backend = require('ClientBackend')
      local ui = require('Plugins.Core.UI')
      local ac = require('Plugins.Core.AC').Game
      local GameScreen = CS.Core.AC.Lib.Screens.GameScreen

      local state = rx:CreateState({
        SelectedId = 0,
        SelectedName = "",
        ServerName = ac.ServerName,
        MaxAllowedConnections = ac.MaxAllowedConnections,
        CurrentConnectionCount = ac.CurrentConnectionCount,
        Characters = {}
      })

      local UpdateCharacters = function()
        state.Characters = {}
        for i,v in pairs(ac.Characters) do
          table.insert(state.Characters, {
            Id = v.Id,
            Name = v.Name
          })
        end
        if #state.Characters > 0 then
          state.SelectedId = state.Characters[1].Id
          state.SelectedName = state.Characters[1].Name
        end
      end

      UpdateCharacters()

      -- subscribe to events to update our reactive state
      ac:OnWorldInfo('+', function()
        state.ServerName = ac.ServerName
        state.MaxAllowedConnections = ac.MaxAllowedConnections
        state.CurrentConnectionCount = ac.CurrentConnectionCount
      end)

      ac:OnCharactersChanged('+', UpdateCharacters)

      local CharacterSelectView = function(state)
        return rx:Div({ class="wrapper" }, {
          rx:Span({ id="world" }, string.format("%s %d / %d", state.ServerName, state.CurrentConnectionCount, state.MaxAllowedConnections)),
          rx:Button({ id="exit", onclick = function(evt)
            ui.PanelManager:ShowModalConfirmation("Are you sure you want to exit?", function(res)
              if res == "Yes" then
                backend:Exit()
              end
            end, "Yes", "No")
          end }, "EXIT"),
          rx:Button({ id="enter", onclick = function(evt)
            if state.SelectedId ~= 0 then
              ac:Login(state.SelectedId)
            end
          end }, "ENTER"),
          rx:Button({ id="createcharacter", onclick = function(evt) ac:SetScreen(GameScreen.CharCreate) end }, "Create Character"),
          rx:Button({ id="credits", onclick = function(evt) ac:SetScreen(GameScreen.Credits) end }, "CREDITS"),
          rx:Button({ id="delete", disabled="disabled", onclick = function(evt) print("DELETE!!") end }, "DELETE"),
          rx:Div({ id="panel" },
            rx:Ul({}, function() 
              local children = {}
                for i,k in ipairs(state.Characters) do
                  table.insert(children, rx:Li({
                    class = {
                      selected = state.SelectedId == k.Id,
                    },
                    onclick = function()
                      state.SelectedId = k.Id
                      state.SelectedName = k.Name
                    end
                  }, k.Name))
                end
              return children
            end)
          )
        })
      end

      document:Mount(function() return CharacterSelectView(state) end, "#characterselect")
    </script>
  </head>
  <body>
    <div id="characterselect"></div>
  </body>
</rml>
