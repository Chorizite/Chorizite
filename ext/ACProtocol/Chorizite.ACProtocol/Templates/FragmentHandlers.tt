<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(SolutionDir)\ext\ACProtocol\Chorizite.ACProtocol.SourceGen\bin\$(Configuration)\netstandard2.0\System.CodeDom.dll" #>
<#@ assembly name="$(SolutionDir)\ext\ACProtocol\Chorizite.ACProtocol.SourceGen\bin\$(Configuration)\netstandard2.0\Chorizite.ACProtocol.SourceGen.dll" #>
<#@ template language="c#" hostspecific="true" inherits="Chorizite.ACProtocol.SourceGen.CSTemplateBase" #>
<#@ output extension=".cs" #>
<#@include file="MultipleOutputHelper.ttinclude"#>
<#
    var manager = Manager.Create(Host, GenerationEnvironment);
    
    SetupMessageParser(this.Host.ResolvePath("../protocol.xml"));
    
    manager.StartNewFile($"../S2CMessageHandler.generated.cs");
#>

using System;
using System.IO;
using Chorizite.ACProtocol.Enums;
using Chorizite.ACProtocol.Messages;
using Chorizite.ACProtocol.Messages.S2C;
using Chorizite.ACProtocol.Messages.S2C.Events;
using Chorizite.ACProtocol.Types;
using Chorizite.ACProtocol;
using Chorizite.Common;
using Chorizite.Common.Enums;
<# WriteUsingAliases(this.MessageReader.ACTypeAliases); #>

namespace Chorizite.ACProtocol {

    public class S2CMessageHandler {
        /// <summary>
        /// Fired for every valid parsed Message
        /// </summary>
        public event EventHandler<S2CMessageEventArgs>? OnMessage {
            add { _OnMessage.Subscribe(value); }
            remove { _OnMessage.Unsubscribe(value); }
        }
        private readonly WeakEvent<S2CMessageEventArgs> _OnMessage = new();

        /// <summary>
        /// Fired for every valid parsed GameEvent
        /// </summary>
        public event EventHandler<GameEventEventArgs>? OnGameEvent {
            add { _OnGameEvent.Subscribe(value); }
            remove { _OnGameEvent.Unsubscribe(value); }
        }
        private readonly WeakEvent<GameEventEventArgs> _OnGameEvent = new();

        /// <summary>
        /// Fired when an unknown Message type was encountered 
        /// </summary>
        public event EventHandler<UnknownMessageEventArgs>? OnUnknownMessage {
            add { _OnUnknownMessage.Subscribe(value); }
            remove { _OnUnknownMessage.Unsubscribe(value); }
        }
        private readonly WeakEvent<UnknownMessageEventArgs> _OnUnknownMessage = new();

<#
    using (new IndentHelper(this)) {
        foreach(var kv in this.MessageReader.ACMessagesS2C) {
            var message = kv.Value;
#>
    /// <summary>
    /// Fired on Message type <#= message.Type #> <#= kv.Key #>. <#= (string.IsNullOrWhiteSpace(message.Text) ? "" : message.Text) #>
    /// </summary>
    public event EventHandler<<#= kv.Key #>>? On<#= kv.Key #> {
        add { _On<#= kv.Key #>.Subscribe(value); }
        remove { _On<#= kv.Key #>.Unsubscribe(value); }
    }
    private readonly WeakEvent<<#= kv.Key #>> _On<#= kv.Key #> = new();

<#
        }
        foreach(var kv in this.MessageReader.GameEvents) {
            var message = kv.Value;
#>
    /// <summary>
    /// Fired on GameEvent type <#= message.Type #> <#= kv.Key #>. <#= (string.IsNullOrWhiteSpace(message.Text) ? "" : message.Text) #>
    /// </summary>
    public event EventHandler<<#= kv.Key #>>? On<#= kv.Key #> {
        add { _On<#= kv.Key #>.Subscribe(value); }
        remove { _On<#= kv.Key #>.Unsubscribe(value); }
    }
    private readonly WeakEvent<<#= kv.Key #>> _On<#= kv.Key #> = new();

<#
        }
#>
    public ACS2CMessage? ProcessS2CMessage(BinaryReader reader) {
        var opcode = (S2CMessageType)reader.ReadUInt32();

        switch (opcode) {
            case (S2CMessageType)0xF7B0: // Value indicating this message has a sequencing header
                var _objectId = reader.ReadUInt32(); // Current unused
                var _sequence = reader.ReadUInt32(); // Currently unused
                var eventType = (GameEventType)reader.ReadUInt32();
                reader.BaseStream.Position -= sizeof(uint) * 3;
                switch(eventType) {
<#
    using (new IndentHelper(this)) {
        foreach(var kv in this.MessageReader.GameEvents) {
#>
                case GameEventType.<#= kv.Key #>:
                    var data_<#= kv.Key #> = new <#= kv.Key #>();
                    data_<#= kv.Key #>.Read(reader);
                    _OnMessage?.Invoke(this, new S2CMessageEventArgs(opcode, data_<#= kv.Key #>));
                    _OnOrdered_GameEvent?.Invoke(this,  data_<#= kv.Key #>);
                    _OnGameEvent?.Invoke(this, new GameEventEventArgs(eventType, data_<#= kv.Key #>));
                    _On<#= kv.Key #>?.Invoke(this, data_<#= kv.Key #>);
                    return data_<#= kv.Key #>;

<#
        }
    }
#>
                    }
                    return null;// end 0xF7B0

<#
        foreach(var kv in this.MessageReader.ACMessagesS2C) {
            if (kv.Value.Ordered == true || kv.Value.Type == "0xF7B0")
                continue;
#>
                case S2CMessageType.<#= kv.Key #>:
                    var data_<#= kv.Key #> = new <#= kv.Key #>();
                    data_<#= kv.Key #>.Read(reader);
                    _OnMessage?.Invoke(this, new S2CMessageEventArgs(opcode, data_<#= kv.Key #>));
                    _On<#= kv.Key #>?.Invoke(this, data_<#= kv.Key #>);
                    return data_<#= kv.Key #>;

<#
        }
    }
#>
                default:
                    var rawData = reader.ReadBytes((int)(reader.BaseStream.Length - reader.BaseStream.Position));
                    _OnUnknownMessage?.Invoke(this, new UnknownMessageEventArgs(MessageDirection.ServerToClient, (uint)opcode, rawData));
                    return null;
            }
        }
    }
}
<#
        
    manager.StartNewFile($"../C2SMessageHandler.generated.cs");
#>
using System;
using System.IO;
using Chorizite.ACProtocol.Enums;
using Chorizite.ACProtocol.Messages;
using Chorizite.ACProtocol.Messages.C2S;
using Chorizite.ACProtocol.Messages.C2S.Actions;
using Chorizite.ACProtocol.Types;
using Chorizite.ACProtocol;
using Chorizite.Common;
<# WriteUsingAliases(this.MessageReader.ACTypeAliases); #>

namespace Chorizite.ACProtocol {
    public class C2SMessageHandler {
        /// <summary>
        /// Fired for every valid parsed Message
        /// </summary>
        public event EventHandler<C2SMessageEventArgs>? OnMessage {
            add { _OnMessage.Subscribe(value); }
            remove { _OnMessage.Unsubscribe(value); }
        }
        private readonly WeakEvent<C2SMessageEventArgs> _OnMessage = new();

        /// <summary>
        /// Fired for every valid parsed GameAction
        /// </summary>
        public event EventHandler<GameActionEventArgs>? OnGameAction {
            add { _OnGameAction.Subscribe(value); }
            remove { _OnGameAction.Unsubscribe(value); }
        }
        private readonly WeakEvent<GameActionEventArgs> _OnGameAction = new();

        /// <summary>
        /// Fired when an unknown Message type was encountered 
        /// </summary>
        public event EventHandler<UnknownMessageEventArgs>? OnUnknownMessage {
            add { _OnUnknownMessage.Subscribe(value); }
            remove { _OnUnknownMessage.Unsubscribe(value); }
        }
        private readonly WeakEvent<UnknownMessageEventArgs> _OnUnknownMessage = new();

<#
    using (new IndentHelper(this)) {
        foreach(var kv in this.MessageReader.ACMessagesC2S) {
            var message = kv.Value;
#>
    /// <summary>
    /// Fired on Message type <#= message.Type #> <#= kv.Key #>. <#= (string.IsNullOrWhiteSpace(message.Text) ? "" : message.Text) #>
    /// </summary>
    public event EventHandler<<#= kv.Key #>>? On<#= kv.Key #> {
        add { _On<#= kv.Key #>.Subscribe(value); }
        remove { _On<#= kv.Key #>.Unsubscribe(value); }
    }
    private readonly WeakEvent<<#= kv.Key #>> _On<#= kv.Key #> = new();

<#
        }
        foreach(var kv in this.MessageReader.GameActions) {
            var message = kv.Value;
#>
    /// <summary>
    /// Fired on GameAction type <#= message.Type #> <#= kv.Key #>. <#= (string.IsNullOrWhiteSpace(message.Text) ? "" : message.Text) #>
    /// </summary>
    public event EventHandler<<#= kv.Key #>>? On<#= kv.Key #> {
        add { _On<#= kv.Key #>.Subscribe(value); }
        remove { _On<#= kv.Key #>.Unsubscribe(value); }
    }
    private readonly WeakEvent<<#= kv.Key #>> _On<#= kv.Key #> = new();

<#
        }
#>
        public ACC2SMessage? ProcessC2SMessage(BinaryReader reader) {
            var opcode = (C2SMessageType)reader.ReadUInt32();

            switch (opcode) {
                case (C2SMessageType)0xF7B1: // Value indicating this Message has a sequencing header
                    var _sequence = reader.ReadUInt32(); // Currently unused
                    var actionType = (GameActionType)reader.ReadUInt32();
                    reader.BaseStream.Position -= sizeof(uint) * 2;

                    switch(actionType) {
<#
    using (new IndentHelper(this))
    using (new IndentHelper(this)) {
        foreach(var kv in this.MessageReader.GameActions) {
#>
                case GameActionType.<#= kv.Key #>:
                    var data_<#= kv.Key #> = new <#= kv.Key #>();
                    data_<#= kv.Key #>.Read(reader);
                    _OnMessage?.Invoke(this, new C2SMessageEventArgs(opcode, data_<#= kv.Key #>));
                    _OnOrdered_GameAction?.Invoke(this,  data_<#= kv.Key #>);
                    _OnGameAction?.Invoke(this, new GameActionEventArgs(actionType, data_<#= kv.Key #>));
                    _On<#= kv.Key #>?.Invoke(this, data_<#= kv.Key #>);
                    return data_<#= kv.Key #>;
<#
        }
    }
#>
                    }
                    return null; // end 0xF7B1

<#
        foreach(var kv in this.MessageReader.ACMessagesC2S) {
            if (kv.Value.Ordered == true || kv.Value.Type == "0xF7B1")
                continue;
#>
                case C2SMessageType.<#= kv.Key #>:
                    var data_<#= kv.Key #> = new <#= kv.Key #>();
                    data_<#= kv.Key #>.Read(reader);
                    _OnMessage?.Invoke(this, new C2SMessageEventArgs(opcode, data_<#= kv.Key #>));
                    _On<#= kv.Key #>?.Invoke(this, data_<#= kv.Key #>);
                    return data_<#= kv.Key #>;

<#
        }
    }
#>
                default:
                    var rawData = reader.ReadBytes((int)(reader.BaseStream.Length - reader.BaseStream.Position));
                    _OnUnknownMessage?.Invoke(this, new UnknownMessageEventArgs(MessageDirection.ClientToServer, (uint)opcode, rawData));
                    return null;
            }
        }
    }
}

        <#
            manager.EndBlock();
    manager.Process(true);
        #>