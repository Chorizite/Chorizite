<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(SolutionDir)\ext\ACProtocol\MagicHat.ACProtocol.SourceGen\bin\Debug\netstandard2.0\System.CodeDom.dll" #>
<#@ assembly name="$(SolutionDir)\ext\ACProtocol\MagicHat.ACProtocol.SourceGen\bin\Debug\netstandard2.0\MagicHat.ACProtocol.SourceGen.dll" #>
<#@ template language="c#" hostspecific="true" inherits="MagicHat.ACProtocol.SourceGen.CSTemplateBase" #> 
<#@ import namespace="MagicHat.ACProtocol.SourceGen.Models" #>
<#@ output extension=".cs" #>
<#@include file="MultipleOutputHelper.ttinclude"#>
<#
    var manager = Manager.Create(Host, GenerationEnvironment);
    
    SetupMessageParser(this.Host.ResolvePath("../protocol.xml"));
    foreach (var kv in this.MessageReader.ACMessagesS2C) {
    manager.StartNewFile($"../Messages/S2C/{kv.Key}.generated.cs");
#>
using System.IO;
using System.Collections.Generic;
using MagicHat.ACProtocol.Enums;
using MagicHat.ACProtocol.Messages;
using MagicHat.ACProtocol.Types;
using MagicHat.ACProtocol.Extensions;
using System.Numerics;
<# WriteUsingAliases(this.MessageReader.ACTypeAliases); #>

namespace MagicHat.ACProtocol.Messages.S2C {
<# 
    using (new IndentHelper(this)) {
            WriteMessageClass(kv.Value);
    }

// close namespace
#>
}
<#
        manager.EndBlock();
    }
    foreach (var kv in this.MessageReader.ACMessagesC2S) {
    manager.StartNewFile($"../Messages/C2S/{kv.Key}.generated.cs"); 
#>
using System.IO;
using System.Collections.Generic;
using MagicHat.ACProtocol.Enums;
using MagicHat.ACProtocol.Messages;
using MagicHat.ACProtocol.Types;
using MagicHat.ACProtocol.Extensions;
using System.Numerics;
<# WriteUsingAliases(this.MessageReader.ACTypeAliases); #>

namespace MagicHat.ACProtocol.Messages.C2S {
<# 
    using (new IndentHelper(this)) {
            WriteMessageClass(kv.Value);
    }

// close namespace
#>
}
<#
        manager.EndBlock();
    }
    manager.Process(true);

    void WriteMessageClass(ACMessage message) {
        // summary docs and class definition
        WriteSummary(message.Text);
        
        if (message.Direction == "c2s") {
            WriteLine("public class " + message.Name + " : ACC2SMessage {");
        }
        else {
            WriteLine("public class " + message.Name + " : ACS2CMessage {");
        }

        using (new IndentHelper(this)) {
            var usedPropertyNames = new List<string>();
            WriteLine($"/// <inheritdoc />");
            WriteLine($"public override uint OpCode => {message.Type};");
            WriteLine("");

            if (message.Direction == "c2s") {
                WriteLine($"/// <inheritdoc />");
                WriteLine($"public override C2SMessageType MessageType => C2SMessageType.{message.Name};");
                WriteLine("");
            }
            else {
                WriteLine($"/// <inheritdoc />");
                WriteLine($"public override S2CMessageType MessageType => S2CMessageType.{message.Name};");
                WriteLine("");
            }

            // generate struct fields from messages.xml
            foreach (var baseModel in message.AllChildren) {
                GenerateClassProperties(baseModel, ref usedPropertyNames);
            }

            // define method that can parse from binary
            WriteSummary("Reads instance data from a binary reader");
            WriteLine("public override void Read(BinaryReader reader) {");
            using (new IndentHelper(this)) {
                WriteLine("base.Read(reader);");
                foreach (var child in message.Children) {
                    GenerateReaderContents(child, 0);
                }
            }
            WriteLine("}\n");

            // define method that can parse from binary 
            WriteSummary("Writes instance data to a binary writer"); 
            WriteLine("public override void Write(BinaryWriter writer) {");
            using (new IndentHelper(this)) {
                WriteLine("base.Write(writer);");
                foreach (var child in message.Children) {
                    GenerateWriterContents(child, 0);
                }
            }
            WriteLine("}\n");
        }
        WriteLine("}\n"); // close class definition
    }
#>